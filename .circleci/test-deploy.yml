version: 2.1
orbs:
  # Your orb will be automatically injected here during the pipeline.
  # Reference your orb's jobs and commands below as they will exist when built.
  orb-tools: circleci/orb-tools@12.0
  # The orb definition is intentionally not included here. It will be injected into the pipeline.
  cloudsmith-python: {}

# Use this tag to ensure test jobs always run,
# even though the downstream publish job will only run on release tags.
filters: &filters
  tags:
    only: /.*/

# Filter for release tags.
release-filters: &release-filters
  branches:
    ignore: /.*/
  tags:
    only: /^v[0-9]+\.[0-9]+\.[0-9]+$/

jobs:

  test-set_env_vars_for_pip:
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - cloudsmith-python/set_env_vars_for_pip:
          repository: "circleci-orb-testing"
      - run:
          name: Assert environment variables have been set
          command: |
            if [ $CLOUDSMITH_DOWNLOADS_DOMAIN != "packages.ft.com" ]
            then
              echo "Test failed: CLOUDSMITH_DOWNLOADS_DOMAIN has not been set correctly."
              exit 1
            fi
            if [ -z $CLOUDSMITH_PIP_INDEX_URL ]
            then
              echo "Test failed: CLOUDSMITH_PIP_INDEX_URL has not been set."
              exit 1
            fi
            echo "All tests passed."

  test-pip_install_package_example:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - cloudsmith-python/set_env_vars_for_pip:
          repository: "circleci-orb-testing"
      - run: python -m pip install simplepkg==0.0.1 --index-url "$CLOUDSMITH_PIP_INDEX_URL"

  test-pip_install_requirements_example:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run: echo "simplepkg==0.0.1" > requirements.txt
      - cloudsmith-python/set_env_vars_for_pip:
          repository: "circleci-orb-testing"
      - run: python -m pip install -r requirements.txt --index-url "$CLOUDSMITH_PIP_INDEX_URL"

  test-pipenv_install_package_example:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run: python -m ensurepip --upgrade
      - cloudsmith-python/set_env_vars_for_pip:
          repository: "circleci-orb-testing"
      - run: python -m pip install pipenv
      - run:
          name: Create Pipfile
          command: |
            cat \<< EOT >> Pipfile
            [[source]]
            url = "\$CLOUDSMITH_PIP_INDEX_URL"
            verify_ssl = true
            name = "cloudsmith"
            [packages]
            simplepkg = "0.0.1"
            [requires]
            python_version = "3.9"
            EOT
      - run: pipenv install

  test-set_env_vars_for_poetry:
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - cloudsmith-python/set_env_vars_for_poetry:
          repository: "circleci-orb-testing"
      - run:
          name: Assert environment variables have been set
          command: |
            if [ $CLOUDSMITH_POETRY_USERNAME != "circleci-orb-testing" ]
            then
              echo "Test failed: CLOUDSMITH_POETRY_USERNAME has not been set correctly."
              exit 1
            fi
            if [ -z $CLOUDSMITH_POETRY_PASSWORD ]
            then
              echo "Test failed: CLOUDSMITH_POETRY_PASSWORD has not been set."
              exit 1
            fi
            echo "All tests passed."

  test-poetry_install_packages_example:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - cloudsmith-python/set_env_vars_for_poetry:
          repository: circleci-orb-testing
      - run:
          name: Create pyproject.toml file
          command: |
            poetry new poetry-package
            cd poetry-package
            poetry source add --priority=default circleci-orb-testing https://packages.ft.com/basic/financial-times-internal-releases/python/simple/
            poetry config http-basic.circleci-orb-testing $CLOUDSMITH_POETRY_USERNAME $CLOUDSMITH_POETRY_PASSWORD
            poetry config http-basic.circleci-orb-testing $CLOUDSMITH_POETRY_USERNAME $CLOUDSMITH_POETRY_PASSWORD
            poetry -v install
            
  test-configure_pip_example:
    docker:
      - image: cimg/python:3.9
    steps:
      - checkout
      - run: echo "simplepkg==0.0.1" > requirements.txt
      - cloudsmith-python/set_env_vars_for_pip:
          repository: "circleci-orb-testing"
      - run: python -m pip config set global.index-url "$CLOUDSMITH_PIP_INDEX_URL"
      - run: python -m pip install -r requirements.txt

  test-set_env_vars_for_twine:
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - cloudsmith-python/set_env_vars_for_twine:
          repository: "circleci-orb-testing"
      - run:
          name: Assert environment variables have been set
          command: |
            if [ $CLOUDSMITH_TWINE_REPOSITORY_URL != "https://python.cloudsmith.io/financial-times/circleci-orb-testing/" ]
            then
              echo "Test failed: CLOUDSMITH_TWINE_REPOSITORY_URL has not been set correctly."
              exit 1
            fi
            if [ $CLOUDSMITH_TWINE_USERNAME != "circleci-orb-testing" ]
            then
              echo "Test failed: CLOUDSMITH_TWINE_USERNAME has not been set correctly."
              exit 1
            fi
            if [ -z $CLOUDSMITH_TWINE_PASSWORD ]
            then
              echo "Test failed: CLOUDSMITH_TWINE_PASSWORD has not been set."
              exit 1
            fi
            echo "All tests passed."

  test-upload_package_using_twine:
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - run: python -m ensurepip --upgrade
      - run:
          name: Build source and wheel distributions
          command: |
            python -m pip install build --upgrade --user
            python -m build
          working_directory: .circleci/simplepkg-py
      - run:
          name: Install twine
          command: |
            python -m pip install twine --upgrade --user
      - cloudsmith-python/set_env_vars_for_twine:
          repository: "circleci-orb-testing"
      - run:
          name: twine upload package to Cloudsmith
          command: |
            twine upload \
                --username $CLOUDSMITH_TWINE_USERNAME \
                --password $CLOUDSMITH_TWINE_PASSWORD \
                --repository-url $CLOUDSMITH_TWINE_REPOSITORY_URL \
                dist/*
          working_directory: .circleci/simplepkg-py

  test-upload_package_using_cli:
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - run: python -m ensurepip --upgrade
      - run:
          name: Build source and wheel distributions
          command: |
            python -m pip install build --upgrade --user
            python -m build
          working_directory: .circleci/simplepkg-py
      - cloudsmith-python/upload_package:
          repository: "circleci-orb-testing"
          dist_dir: .circleci/simplepkg-py/dist

  test-upload_package_using_poetry:
    docker:
      - image: cimg/python:3.9
    resource_class: small
    steps:
      - checkout
      - cloudsmith-python/set_env_vars_for_poetry:
          repository: circleci-orb-testing
      - run:
          command: |
            poetry new poetry-package
            cd poetry-package
            poetry source add --priority=default circleci-orb-testing https://python.cloudsmith.io/financial-times/circleci-orb-testing/
            poetry config http-basic.circleci-orb-testing $CLOUDSMITH_POETRY_USERNAME $CLOUDSMITH_POETRY_PASSWORD
            poetry build
            poetry publish -r circleci-orb-testing
          name: Package the code and publish the package
          working_directory: .circleci/
      - cloudsmith-python/upload_package:
          repository: circleci-orb-testing
          dist_dir: .circleci/poetry-package/dist

workflows:
  test-deploy:
    jobs:
      # Make sure to include "filters: *filters" in every test job you want to run as part of your deployment.
      # Test your orb's commands in a custom job and test your orb's jobs directly as a part of this workflow.
      - test-set_env_vars_for_pip:
          context: circleci-orb-publishing
          filters: *filters
      - test-pip_install_package_example:
          context: circleci-orb-publishing
          filters: *filters
      - test-pip_install_requirements_example:
          context: circleci-orb-publishing
          filters: *filters
      - test-pipenv_install_package_example:
          context: circleci-orb-publishing
          filters: *filters
      - test-set_env_vars_for_poetry:
          context: circleci-orb-publishing
          filters: *filters
      - test-poetry_install_packages_example:
          context: circleci-orb-publishing
          filters: *filters
      - test-configure_pip_example:
          context: circleci-orb-publishing
          filters: *filters
      - test-set_env_vars_for_twine:
          context: circleci-orb-publishing
          filters: *filters
      - test-upload_package_using_twine:
          context: circleci-orb-publishing
          filters: *filters
      - test-upload_package_using_cli:
          context: circleci-orb-publishing
          filters: *filters
          requires:
            - test-upload_package_using_twine
      - test-upload_package_using_poetry:
          context: circleci-orb-publishing
          filters: *filters

      # The orb must be re-packed for publishing, and saved to the workspace.
      - orb-tools/pack:
          filters: *release-filters
      - orb-tools/publish:
          orb_name: ft-circleci-orbs/cloudsmith-python
          vcs_type: << pipeline.project.type >>
          pub_type: production
          # Ensure this job requires all test jobs and the pack job.
          requires:
            - orb-tools/pack
            - test-set_env_vars_for_pip
            - test-pip_install_package_example
            - test-pip_install_requirements_example
            - test-pipenv_install_package_example
            - test-set_env_vars_for_poetry
            - test-poetry_install_packages_example
            - test-configure_pip_example
            - test-set_env_vars_for_twine
            - test-upload_package_using_twine
            - test-upload_package_using_cli
            - test-upload_package_using_poetry
          # Use a context to hold your publishing token.
          context: circleci-orb-publishing
          filters: *release-filters
